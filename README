pun
===

The name "pun" is not an acronym meaning "-p und -n", and whoever might have
told you that was gravely misinformed. I can definitely see how such a rumour
gets started, though.

It also doesn't mean "Perl6 understands -n", "probably ultimately neglected",
"proudly undermining normality", or "print unusually neatly".

For all the things it doesn't mean, pun gives you the -p and -n flags before
they exist in Rakudo. It's two simple wrappers that simulate those flags.

pun is Copyright (C) 2009, the pun contributors (as listed in AUTHORS).

usage
=====

In the following examples, the input (and possibly the output) follows directly
on the program, until a manual end-of-file (^D).

$ ./perl6n -e ' # a wc clone
    BEGIN { $*words = $*chars = 0 };
    $*words += .words;
    $*chars += .chars + 1;
    END { say sprintf "%8d" x 3, $*IN.ins - 1, $*words, $*chars }'
foo bar baz
^D
       1       3      12

$ ./perl6p -e .=flip # a rev clone
I CAN HAZ BACKWARDS?
?SDRAWKCAB ZAH NAC I
^D

You might want to put the 'perl6n' and 'perl6p' scripts in the way of your
$PATH. That way, you can skip the initial './' above.

LICENSE INFORMATION
-------------------

pun is free software; you can redistribute it and/or modify it under the
terms of the Artistic License 2.0.  (Note that, unlike the Artistic License
1.0, version 2.0 is GPL compatible by itself, hence there is no benefit to
having an Artistic 2.0 / GPL disjunction.)
